---
description: Supabase 통합 규칙 (인증, 데이터베이스, 스토리지)
globs: lib/**/*.ts,app/**/*.ts,app/**/*.tsx
---

# Supabase 통합 가이드

이 프로젝트는 Supabase를 데이터베이스 및 인증 시스템으로 사용합니다.

## 환경 설정

### 환경 변수
`.env.local` 파일에 다음 환경 변수를 설정하세요:

```bash
NEXT_PUBLIC_SUPABASE_URL=https://your-project.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key
SUPABASE_SERVICE_ROLE_KEY=your-service-role-key  # 서버 전용, 클라이언트에서 사용 금지!
```

**중요**: 
- `NEXT_PUBLIC_*` 변수는 클라이언트에 노출됩니다
- `SUPABASE_SERVICE_ROLE_KEY`는 서버 전용이며, RLS를 우회할 수 있으므로 절대 클라이언트에서 사용하지 마세요

### Supabase 클라이언트 설정

```tsx
// lib/supabase/client.ts
import { createBrowserClient } from '@supabase/ssr'

export function createClient() {
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  )
}
```

```tsx
// lib/supabase/server.ts
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'

export async function createClient() {
  const cookieStore = await cookies()

  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll()
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            )
          } catch {
            // Server Component에서는 쿠키 설정이 불가능할 수 있음
          }
        },
      },
    }
  )
}
```

## 인증 (Authentication)

### 회원가입
```tsx
// app/signup/actions.ts
'use server'

import { createClient } from '@/lib/supabase/server'
import { revalidatePath } from 'next/cache'
import { redirect } from 'next/navigation'

export async function signup(formData: FormData) {
  const supabase = await createClient()

  const email = formData.get('email') as string
  const password = formData.get('password') as string
  const name = formData.get('name') as string

  const { error } = await supabase.auth.signUp({
    email,
    password,
    options: {
      data: {
        name,
      },
    },
  })

  if (error) {
    return { error: error.message }
  }

  revalidatePath('/', 'layout')
  redirect('/login')
}
```

```tsx
// app/signup/page.tsx
import { signup } from './actions'

export default function SignupPage() {
  return (
    <form action={signup}>
      <input name="email" type="email" required />
      <input name="password" type="password" required />
      <input name="name" type="text" required />
      <button type="submit">회원가입</button>
    </form>
  )
}
```

### 로그인
```tsx
// app/login/actions.ts
'use server'

import { createClient } from '@/lib/supabase/server'
import { revalidatePath } from 'next/cache'
import { redirect } from 'next/navigation'

export async function login(formData: FormData) {
  const supabase = await createClient()

  const email = formData.get('email') as string
  const password = formData.get('password') as string

  const { error } = await supabase.auth.signInWithPassword({
    email,
    password,
  })

  if (error) {
    return { error: error.message }
  }

  revalidatePath('/', 'layout')
  redirect('/')
}
```

### 로그아웃
```tsx
// app/logout/actions.ts
'use server'

import { createClient } from '@/lib/supabase/server'
import { revalidatePath } from 'next/cache'
import { redirect } from 'next/navigation'

export async function logout() {
  const supabase = await createClient()
  await supabase.auth.signOut()
  revalidatePath('/', 'layout')
  redirect('/login')
}
```

### 현재 사용자 정보 가져오기

#### Server Component
```tsx
import { createClient } from '@/lib/supabase/server'

export default async function ProfilePage() {
  const supabase = await createClient()
  
  const { data: { user } } = await supabase.auth.getUser()
  
  if (!user) {
    redirect('/login')
  }
  
  return (
    <div>
      <p>이메일: {user.email}</p>
      <p>이름: {user.user_metadata.name}</p>
    </div>
  )
}
```

#### Client Component
```tsx
'use client'

import { createClient } from '@/lib/supabase/client'
import { useEffect, useState } from 'react'
import type { User } from '@supabase/supabase-js'

export function UserProfile() {
  const [user, setUser] = useState<User | null>(null)
  const supabase = createClient()
  
  useEffect(() => {
    const getUser = async () => {
      const { data: { user } } = await supabase.auth.getUser()
      setUser(user)
    }
    
    getUser()
  }, [supabase])
  
  if (!user) return <div>로그인이 필요합니다</div>
  
  return <div>{user.email}</div>
}
```

## 데이터베이스 (Database)

### 데이터베이스 스키마

키위마켓의 주요 테이블:

```sql
-- users (프로필)
CREATE TABLE profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id),
  email TEXT NOT NULL,
  name TEXT NOT NULL,
  region_gu TEXT NOT NULL,
  region_dong TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- products (상품)
CREATE TABLE products (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  seller_id UUID REFERENCES profiles(id) NOT NULL,
  title TEXT NOT NULL,
  description TEXT NOT NULL,
  price INTEGER NOT NULL,
  images TEXT[] NOT NULL,
  location_gu TEXT NOT NULL,
  location_dong TEXT NOT NULL,
  status TEXT NOT NULL DEFAULT 'available', -- available, reserved, sold
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- chat_rooms (채팅방)
CREATE TABLE chat_rooms (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  product_id UUID REFERENCES products(id) NOT NULL,
  buyer_id UUID REFERENCES profiles(id) NOT NULL,
  seller_id UUID REFERENCES profiles(id) NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- chat_messages (채팅 메시지)
CREATE TABLE chat_messages (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  chat_room_id UUID REFERENCES chat_rooms(id) NOT NULL,
  sender_id UUID REFERENCES profiles(id) NOT NULL,
  content TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- transactions (거래)
CREATE TABLE transactions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  product_id UUID REFERENCES products(id) NOT NULL,
  buyer_id UUID REFERENCES profiles(id) NOT NULL,
  seller_id UUID REFERENCES profiles(id) NOT NULL,
  status TEXT NOT NULL DEFAULT 'pending', -- pending, completed, cancelled
  delivery_departure TEXT,
  delivery_destination TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  completed_at TIMESTAMP WITH TIME ZONE
);
```

### RLS (Row Level Security) 정책

**중요**: 모든 테이블에 RLS를 활성화하고 적절한 정책을 설정하세요.

```sql
-- products 테이블 RLS
ALTER TABLE products ENABLE ROW LEVEL SECURITY;

-- 모든 사용자가 상품 조회 가능
CREATE POLICY "Anyone can view products"
  ON products FOR SELECT
  USING (true);

-- 자신의 상품만 생성 가능
CREATE POLICY "Users can create their own products"
  ON products FOR INSERT
  WITH CHECK (auth.uid() = seller_id);

-- 자신의 상품만 수정 가능
CREATE POLICY "Users can update their own products"
  ON products FOR UPDATE
  USING (auth.uid() = seller_id);

-- 자신의 상품만 삭제 가능
CREATE POLICY "Users can delete their own products"
  ON products FOR DELETE
  USING (auth.uid() = seller_id);
```

### 데이터 조회 (Read)

```tsx
// Server Component에서 데이터 조회
import { createClient } from '@/lib/supabase/server'

export default async function ProductsPage() {
  const supabase = await createClient()
  
  const { data: products, error } = await supabase
    .from('products')
    .select('*')
    .eq('status', 'available')
    .order('created_at', { ascending: false })
  
  if (error) {
    console.error('Error fetching products:', error)
    return <div>상품을 불러올 수 없습니다</div>
  }
  
  return (
    <div>
      {products.map((product) => (
        <ProductCard key={product.id} product={product} />
      ))}
    </div>
  )
}
```

### 데이터 삽입 (Create)

```tsx
// Server Action으로 상품 등록
'use server'

import { createClient } from '@/lib/supabase/server'
import { revalidatePath } from 'next/cache'

export async function createProduct(formData: FormData) {
  const supabase = await createClient()
  
  const { data: { user } } = await supabase.auth.getUser()
  if (!user) {
    return { error: '로그인이 필요합니다' }
  }
  
  const { data, error } = await supabase
    .from('products')
    .insert({
      seller_id: user.id,
      title: formData.get('title') as string,
      description: formData.get('description') as string,
      price: parseInt(formData.get('price') as string),
      images: [], // 이미지는 별도 처리
      location_gu: formData.get('location_gu') as string,
      location_dong: formData.get('location_dong') as string,
    })
    .select()
    .single()
  
  if (error) {
    return { error: error.message }
  }
  
  revalidatePath('/products')
  return { success: true, data }
}
```

### 데이터 업데이트 (Update)

```tsx
'use server'

import { createClient } from '@/lib/supabase/server'
import { revalidatePath } from 'next/cache'

export async function updateProductStatus(productId: string, status: string) {
  const supabase = await createClient()
  
  const { data: { user } } = await supabase.auth.getUser()
  if (!user) {
    return { error: '로그인이 필요합니다' }
  }
  
  const { error } = await supabase
    .from('products')
    .update({ status })
    .eq('id', productId)
    .eq('seller_id', user.id) // 본인의 상품만 수정 가능
  
  if (error) {
    return { error: error.message }
  }
  
  revalidatePath(`/products/${productId}`)
  return { success: true }
}
```

### 실시간 구독 (Realtime)

채팅 메시지 실시간 구독:

```tsx
'use client'

import { createClient } from '@/lib/supabase/client'
import { useEffect, useState } from 'react'

export function ChatMessages({ chatRoomId }: { chatRoomId: string }) {
  const [messages, setMessages] = useState<Message[]>([])
  const supabase = createClient()
  
  useEffect(() => {
    // 초기 메시지 로드
    const fetchMessages = async () => {
      const { data } = await supabase
        .from('chat_messages')
        .select('*')
        .eq('chat_room_id', chatRoomId)
        .order('created_at', { ascending: true })
      
      if (data) setMessages(data)
    }
    
    fetchMessages()
    
    // 실시간 구독
    const channel = supabase
      .channel(`chat:${chatRoomId}`)
      .on(
        'postgres_changes',
        {
          event: 'INSERT',
          schema: 'public',
          table: 'chat_messages',
          filter: `chat_room_id=eq.${chatRoomId}`,
        },
        (payload) => {
          setMessages((prev) => [...prev, payload.new as Message])
        }
      )
      .subscribe()
    
    return () => {
      supabase.removeChannel(channel)
    }
  }, [chatRoomId, supabase])
  
  return (
    <div>
      {messages.map((msg) => (
        <div key={msg.id}>{msg.content}</div>
      ))}
    </div>
  )
}
```

## 스토리지 (Storage)

상품 이미지 업로드:

```tsx
'use client'

import { createClient } from '@/lib/supabase/client'

export async function uploadProductImage(file: File) {
  const supabase = createClient()
  
  const fileExt = file.name.split('.').pop()
  const fileName = `${Math.random()}.${fileExt}`
  const filePath = `products/${fileName}`
  
  const { data, error } = await supabase.storage
    .from('product-images')
    .upload(filePath, file)
  
  if (error) {
    throw error
  }
  
  // 공개 URL 가져오기
  const { data: { publicUrl } } = supabase.storage
    .from('product-images')
    .getPublicUrl(filePath)
  
  return publicUrl
}
```

## 타입 생성

TypeScript 타입 안전성을 위해 Supabase 타입 생성:

```bash
npx supabase gen types typescript --project-id YOUR_PROJECT_ID > types/supabase.ts
```

```tsx
// lib/supabase/client.ts (타입 적용)
import { createBrowserClient } from '@supabase/ssr'
import type { Database } from '@/types/supabase'

export function createClient() {
  return createBrowserClient<Database>(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  )
}
```

## 보안 권장사항

1. **RLS 활성화**: 모든 테이블에 Row Level Security 설정
2. **인증 확인**: Server Actions에서 항상 사용자 인증 상태 확인
3. **환경 변수 보호**: `.env.local`은 절대 Git에 커밋하지 않음
4. **ANON KEY만 사용**: 클라이언트에서는 절대 SERVICE KEY 사용 금지
5. **입력 검증**: 모든 사용자 입력을 서버에서 검증