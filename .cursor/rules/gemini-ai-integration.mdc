---
description: Gemini AI API 통합 및 사용 가이드
---

# Gemini AI API 통합 규칙

키위마켓 프로젝트에서 Google Gemini AI API를 사용하는 방법을 정의합니다.

## 패키지 설치

```bash
npm install @google/genai
```

## 환경 변수 설정

### `.env.local`
```bash
# Gemini AI API Key
GEMINI_API_KEY=your-gemini-api-key
```

### `.env.example`
```bash
# Gemini AI API Key
GEMINI_API_KEY=your-gemini-api-key
```

**중요**: 
- `GEMINI_API_KEY`는 서버 전용 환경 변수입니다
- `NEXT_PUBLIC_` 접두사를 붙이지 마세요 (클라이언트 노출 금지)
- API 키는 [Google AI Studio](https://aistudio.google.com/app/apikey)에서 발급받을 수 있습니다

## 클라이언트 초기화

### 기본 초기화
```typescript
import { GoogleGenAI } from '@google/genai';

// 환경 변수 사용 (권장)
const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });

// 또는 환경 변수 자동 로드
const ai = new GoogleGenAI({}); // GEMINI_API_KEY 환경 변수 자동 사용
```

### Vertex AI 사용 시
```typescript
const ai = new GoogleGenAI({
  vertexai: true,
  project: 'your-project-id',
  location: 'us-central1',
  apiVersion: 'v1'
});
```

## 주요 기능

### 1. 텍스트 생성

#### 기본 사용
```typescript
import { GoogleGenAI } from '@google/genai';

const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });

async function generateText() {
  const response = await ai.models.generateContent({
    model: 'gemini-2.5-flash',
    contents: 'Why is the sky blue?',
  });

  console.log(response.text); // 마크다운 형식으로 출력됨
}
```

#### 스트리밍 응답
```typescript
async function generateTextStream() {
  const response = await ai.models.generateContentStream({
    model: 'gemini-2.5-flash',
    contents: 'Write a 100-word poem.',
  });

  for await (const chunk of response) {
    console.log(chunk.text);
  }
}
```

### 2. 이미지 생성

```typescript
async function generateImage() {
  const response = await ai.models.generateImages({
    model: 'imagen-4.0-fast-generate-001',
    prompt: 'A friendly robot holding a red skateboard, minimalist vector art',
    config: {
      numberOfImages: 1,
      outputMimeType: 'image/jpeg',
      aspectRatio: '1:1', // "1:1", "3:4", "4:3", "9:16", "16:9"
    },
  });

  const base64ImageBytes = response.generatedImages[0].image.imageBytes;
  const imageUrl = `data:image/jpeg;base64,${base64ImageBytes}`;
  return imageUrl;
}
```

### 3. 멀티모달 입력 (이미지 + 텍스트)

```typescript
import { GoogleGenAI, Part } from '@google/genai';
import * as fs from 'fs';

function fileToGenerativePart(path: string, mimeType: string): Part {
  return {
    inlineData: {
      data: Buffer.from(fs.readFileSync(path)).toString("base64"),
      mimeType
    },
  };
}

async function analyzeImage() {
  const imagePart = fileToGenerativePart("path/to/image.jpg", "image/jpeg");

  const response = await ai.models.generateContent({
    model: 'gemini-2.5-flash',
    contents: [imagePart, "Explain what's in this image"],
  });

  console.log(response.text);
}
```

### 4. JSON 구조화된 출력

```typescript
import { GoogleGenAI, Type } from '@google/genai';

async function getStructuredOutput() {
  const response = await ai.models.generateContent({
    model: 'gemini-2.5-flash',
    contents: 'List a few popular cookie recipes',
    config: {
      responseMimeType: 'application/json',
      responseSchema: {
        type: Type.ARRAY,
        items: {
          type: Type.OBJECT,
          properties: {
            recipeName: {
              type: Type.STRING,
              description: 'The name of the recipe.',
            },
            ingredients: {
              type: Type.ARRAY,
              items: {
                type: Type.STRING,
              },
              description: 'The ingredients for the recipe.',
            },
          },
          propertyOrdering: ["recipeName", "ingredients"],
        },
      },
    },
  });

  const jsonData = JSON.parse(response.text);
  return jsonData;
}
```

### 5. 함수 호출 (Function Calling)

```typescript
import { GoogleGenAI, FunctionDeclaration, Type } from '@google/genai';

async function functionCalling() {
  const controlLightDeclaration: FunctionDeclaration = {
    name: 'controlLight',
    parameters: {
      type: Type.OBJECT,
      description: 'Set brightness and color temperature of a light.',
      properties: {
        brightness: { 
          type: Type.NUMBER, 
          description: 'Light level from 0 to 100.' 
        },
        colorTemperature: { 
          type: Type.STRING, 
          description: '`daylight`, `cool`, or `warm`.'
        },
      },
      required: ['brightness', 'colorTemperature'],
    },
  };

  const response = await ai.models.generateContent({
    model: 'gemini-2.5-flash',
    contents: 'Dim the lights so the room feels cozy and warm.',
    config: {
      tools: [{ functionDeclarations: [controlLightDeclaration] }]
    }
  });

  if (response.functionCalls) {
    console.log(response.functionCalls);
    // 실제 함수를 실행하고 결과를 다시 모델에 전달
  }
}
```

### 6. 멀티턴 대화 (채팅)

```typescript
async function chatConversation() {
  const chat = ai.chats.create({ model: "gemini-2.5-flash" });

  let response = await chat.sendMessage({ 
    message: "I have 2 dogs in my house." 
  });
  console.log(response.text);

  response = await chat.sendMessage({ 
    message: "How many paws are in my house?" 
  });
  console.log(response.text);

  // 대화 히스토리 가져오기
  const history = await chat.getHistory();
  for (const message of history) {
    console.log(`${message.role}: ${message.parts[0].text}`);
  }
}
```

### 7. Google Search 연동

```typescript
async function searchGrounding() {
  const response = await ai.models.generateContent({
    model: "gemini-2.5-flash",
    contents: "Who won the latest F1 race?",
    config: {
      tools: [{ googleSearch: {} }],
    },
  });

  console.log("Response:", response.text);

  // 출처 URL 추출
  const searchChunks = response.candidates?.[0]?.groundingMetadata?.groundingChunks;
  if (searchChunks) {
    const urls = searchChunks.map(chunk => chunk.web.uri);
    console.log("Sources:", urls);
  }
}
```

## 설정 옵션

### GenerateContentConfig
```typescript
interface GenerateContentConfig {
  // 토큰 제한
  maxOutputTokens?: number;
  
  // 온도 (0.0 ~ 2.0, 기본값 1.0)
  // 낮을수록 일관성, 높을수록 창의성
  temperature?: number;
  
  // Top-K 샘플링
  topK?: number;
  
  // Top-P 샘플링 (0.0 ~ 1.0)
  topP?: number;
  
  // 중지 시퀀스
  stopSequences?: string[];
  
  // 안전 설정
  safetySettings?: SafetySetting[];
  
  // 응답 형식
  responseMimeType?: string; // 'application/json', 'text/plain'
  responseSchema?: SchemaUnion;
  
  // 시스템 지시사항
  systemInstruction?: ContentUnion;
  
  // 도구 (함수, 검색 등)
  tools?: ToolListUnion;
  toolConfig?: ToolConfig;
}
```

### 안전 설정
```typescript
import { HarmCategory, HarmBlockThreshold } from '@google/genai';

const safetySettings = [
  {
    category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
    threshold: HarmBlockThreshold.BLOCK_LOW_AND_ABOVE,
  },
  {
    category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
  },
];
```

## 주요 모델

### 텍스트 생성
- `gemini-2.5-flash` - 빠른 응답, 일반 용도 (권장)
- `gemini-2.5-pro` - 고품질 응답, 복잡한 작업
- `gemini-2.0-flash-001` - 안정 버전

### 이미지 생성
- `imagen-4.0-fast-generate-001` - 빠른 이미지 생성
- `imagen-4.0-ultra-generate-001` - 고품질 이미지

### 이미지 편집
- `gemini-2.5-flash-image-preview` - 이미지 편집/수정

### 비디오 생성
- `veo-3.0-fast-generate-preview` - 비디오 생성

## Next.js 통합

### Server Actions에서 사용
```typescript
// actions/ai.ts
'use server'

import { GoogleGenAI } from '@google/genai';

const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });

export async function generateProductDescription(productName: string) {
  const response = await ai.models.generateContent({
    model: 'gemini-2.5-flash',
    contents: `Create a compelling product description for: ${productName}`,
  });

  return response.text;
}
```

### API Route에서 사용
```typescript
// app/api/ai/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { GoogleGenAI } from '@google/genai';

const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });

export async function POST(request: NextRequest) {
  try {
    const { prompt } = await request.json();

    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash',
      contents: prompt,
    });

    return NextResponse.json({ result: response.text });
  } catch (error) {
    console.error('Gemini API Error:', error);
    return NextResponse.json(
      { error: 'AI 응답 생성 실패' },
      { status: 500 }
    );
  }
}
```

### 스트리밍 API Route
```typescript
// app/api/ai/stream/route.ts
import { NextRequest } from 'next/server';
import { GoogleGenAI } from '@google/genai';

const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });

export async function POST(request: NextRequest) {
  const { prompt } = await request.json();

  const stream = new ReadableStream({
    async start(controller) {
      try {
        const response = await ai.models.generateContentStream({
          model: 'gemini-2.5-flash',
          contents: prompt,
        });

        for await (const chunk of response) {
          const text = chunk.text;
          controller.enqueue(new TextEncoder().encode(text));
        }

        controller.close();
      } catch (error) {
        controller.error(error);
      }
    },
  });

  return new Response(stream, {
    headers: { 'Content-Type': 'text/plain; charset=utf-8' },
  });
}
```

## 키위마켓 활용 사례

### 1. 상품 설명 자동 생성
```typescript
async function generateProductDescription(productName: string, category: string) {
  const response = await ai.models.generateContent({
    model: 'gemini-2.5-flash',
    contents: `다음 중고 상품에 대한 간결하고 매력적인 설명을 한국어로 작성해주세요:
상품명: ${productName}
카테고리: ${category}

설명은 3-5줄로 작성하고, 구매자의 관심을 끌 수 있도록 작성해주세요.`,
    config: {
      maxOutputTokens: 200,
      temperature: 0.7,
    },
  });

  return response.text;
}
```

### 2. 상품 이미지 분석
```typescript
async function analyzeProductImage(imagePath: string) {
  const imagePart = fileToGenerativePart(imagePath, "image/jpeg");

  const response = await ai.models.generateContent({
    model: 'gemini-2.5-flash',
    contents: [
      imagePart,
      "이 이미지에 있는 상품의 종류, 상태, 특징을 한국어로 설명해주세요."
    ],
  });

  return response.text;
}
```

### 3. 채팅 자동 응답 (FAQ)
```typescript
async function getChatbotResponse(userMessage: string, context: string) {
  const response = await ai.models.generateContent({
    model: 'gemini-2.5-flash',
    contents: `당신은 중고 거래 플랫폼 '키위마켓'의 고객 지원 AI입니다.
사용자의 질문에 친절하고 정확하게 답변해주세요.

컨텍스트: ${context}
사용자 질문: ${userMessage}

답변:`,
    config: {
      maxOutputTokens: 300,
      temperature: 0.5,
    },
  });

  return response.text;
}
```

### 4. 금지 키워드 검사
```typescript
async function checkProhibitedContent(text: string) {
  const response = await ai.models.generateContent({
    model: 'gemini-2.5-flash',
    contents: `다음 텍스트에 부적절한 내용이나 금지된 상품이 포함되어 있는지 검사해주세요.
텍스트: ${text}

JSON 형식으로 답변:
- isProhibited: boolean
- reason: string (부적절한 경우 이유)`,
    config: {
      responseMimeType: 'application/json',
      responseSchema: {
        type: Type.OBJECT,
        properties: {
          isProhibited: { type: Type.BOOLEAN },
          reason: { type: Type.STRING },
        },
      },
    },
  });

  return JSON.parse(response.text);
}
```

## 에러 처리

```typescript
import { GoogleGenAI } from '@google/genai';

async function safeGenerateContent(prompt: string) {
  try {
    const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });
    
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash',
      contents: prompt,
    });

    return { success: true, text: response.text };
  } catch (error: any) {
    console.error('Gemini API Error:', error);

    if (error.status === 429) {
      return { success: false, error: 'API 요청 한도 초과' };
    } else if (error.status === 401) {
      return { success: false, error: 'API 키가 유효하지 않습니다' };
    } else if (error.status === 400) {
      return { success: false, error: '잘못된 요청입니다' };
    }

    return { success: false, error: 'AI 응답 생성 실패' };
  }
}
```

## 비용 최적화

1. **적절한 모델 선택**
   - 일반 작업: `gemini-2.5-flash` (저렴하고 빠름)
   - 복잡한 작업: `gemini-2.5-pro` (고품질)

2. **토큰 제한 설정**
   ```typescript
   config: {
     maxOutputTokens: 200, // 필요한 만큼만 설정
   }
   ```

3. **스트리밍 사용**
   - 사용자 경험 개선
   - 지연 시간 단축

4. **캐싱 활용** (해당되는 경우)
   ```typescript
   config: {
     cachedContent: 'cached-content-id',
   }
   ```

## 보안 주의사항

1. ⚠️ **API 키는 서버 사이드에서만 사용**
   - 클라이언트 컴포넌트에서 직접 호출 금지
   - Server Actions 또는 API Route를 통해 호출

2. ⚠️ **환경 변수 관리**
   - `.env.local`에 저장
   - Git에 커밋하지 않음
   - `NEXT_PUBLIC_` 접두사 사용 금지

3. ⚠️ **사용자 입력 검증**
   ```typescript
   function validateInput(input: string): boolean {
     if (input.length > 10000) return false;
     // 추가 검증 로직
     return true;
   }
   ```

4. ⚠️ **Rate Limiting 구현**
   - API 요청 제한 설정
   - 사용자별 요청 횟수 제한

## 참고 자료

- [Gemini API 공식 문서](https://ai.google.dev/gemini-api/docs)
- [Google GenAI JS SDK GitHub](https://github.com/googleapis/js-genai)
- [Google AI Studio](https://aistudio.google.com/) - API 키 발급 및 테스트
- [Gemini 모델 목록](https://ai.google.dev/gemini-api/docs/models)
- [가격 정보](https://ai.google.dev/pricing)

## 업데이트

이 규칙은 Context7 MCP를 통해 최신 `@google/genai` (googleapis/js-genai) 문서를 기반으로 작성되었습니다.
마지막 업데이트: 2025-10-01
