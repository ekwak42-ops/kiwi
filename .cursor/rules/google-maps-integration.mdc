---
description: Google Maps API 통합 규칙
---

# Google Maps API 통합 가이드

키위마켓은 배송 위치 확인을 위해 Google Maps API를 사용합니다.

## 환경 설정

### 환경 변수
`.env.local` 파일에 Google Maps API 키를 추가하세요:

```bash
NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=your-google-maps-api-key
```

### API 키 발급
1. [Google Cloud Console](https://console.cloud.google.com/)에서 프로젝트 생성
2. Maps JavaScript API 활성화
3. API 키 생성
4. API 키 제한 설정 (보안을 위해 HTTP 리퍼러 제한 권장)

## 설치

```bash
npm install @googlemaps/js-api-loader
```

## 기본 구현

### Google Maps 컴포넌트

```tsx
// components/GoogleMap.tsx
'use client'

import { useEffect, useRef } from 'react'
import { Loader } from '@googlemaps/js-api-loader'

interface GoogleMapProps {
  center: { lat: number; lng: number }
  zoom?: number
  markers?: Array<{ lat: number; lng: number; label?: string }>
}

export function GoogleMap({ center, zoom = 14, markers = [] }: GoogleMapProps) {
  const mapRef = useRef<HTMLDivElement>(null)
  const mapInstanceRef = useRef<google.maps.Map | null>(null)

  useEffect(() => {
    const initMap = async () => {
      const loader = new Loader({
        apiKey: process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY!,
        version: 'weekly',
        libraries: ['places'],
      })

      const { Map } = await loader.importLibrary('maps')
      const { Marker } = await loader.importLibrary('marker')

      if (mapRef.current) {
        // 지도 생성
        const map = new Map(mapRef.current, {
          center,
          zoom,
          mapId: 'kiwimarket-map',
        })

        mapInstanceRef.current = map

        // 마커 추가
        markers.forEach((markerPosition) => {
          new Marker({
            position: markerPosition,
            map,
            label: markerPosition.label,
          })
        })
      }
    }

    initMap()
  }, [center, zoom, markers])

  return (
    <div 
      ref={mapRef} 
      className="w-full h-full min-h-[400px] rounded-lg"
    />
  )
}
```

## 키위마켓 사용 사례

### 1. 상품 상세 페이지 - 배송 가능 지역 표시

```tsx
// app/products/[id]/page.tsx
import { GoogleMap } from '@/components/GoogleMap'

export default async function ProductDetailPage({
  params,
}: {
  params: Promise<{ id: string }>
}) {
  const { id } = await params
  const product = await fetchProduct(id)
  
  // 지역명을 좌표로 변환 (Geocoding API 사용)
  const location = await geocodeAddress(
    `${product.location_gu} ${product.location_dong}`
  )
  
  return (
    <div>
      <h1>{product.title}</h1>
      
      {/* 상품 정보 */}
      <div>...</div>
      
      {/* 배송 가능 지역 지도 */}
      <div className="mt-8">
        <h2 className="text-xl font-bold mb-4">배송 가능 지역</h2>
        <GoogleMap
          center={location}
          zoom={13}
          markers={[
            { ...location, label: '상품 위치' }
          ]}
        />
      </div>
    </div>
  )
}
```

### 2. 배송 추적 - 출발지/도착지 표시

```tsx
// app/mypage/purchases/[transactionId]/page.tsx
import { GoogleMap } from '@/components/GoogleMap'

export default async function DeliveryTrackingPage({
  params,
}: {
  params: Promise<{ transactionId: string }>
}) {
  const { transactionId } = await params
  const transaction = await fetchTransaction(transactionId)
  
  const departure = await geocodeAddress(transaction.delivery_departure)
  const destination = await geocodeAddress(transaction.delivery_destination)
  
  return (
    <div>
      <h1>배송 추적</h1>
      
      <GoogleMap
        center={departure}
        zoom={12}
        markers={[
          { ...departure, label: 'A' }, // 출발지
          { ...destination, label: 'B' }, // 도착지
        ]}
      />
      
      <div className="mt-4">
        <p><strong>출발지:</strong> {transaction.delivery_departure}</p>
        <p><strong>도착지:</strong> {transaction.delivery_destination}</p>
      </div>
    </div>
  )
}
```

### 3. Geocoding - 주소를 좌표로 변환

```tsx
// lib/geocoding.ts
export async function geocodeAddress(
  address: string
): Promise<{ lat: number; lng: number }> {
  const response = await fetch(
    `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(address)}&key=${process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}`
  )
  
  const data = await response.json()
  
  if (data.status === 'OK' && data.results.length > 0) {
    const location = data.results[0].geometry.location
    return { lat: location.lat, lng: location.lng }
  }
  
  throw new Error('Geocoding failed')
}
```

### 4. 지역 검색 (Autocomplete)

```tsx
// components/LocationSearchInput.tsx
'use client'

import { useEffect, useRef } from 'react'
import { Loader } from '@googlemaps/js-api-loader'

interface LocationSearchInputProps {
  onLocationSelect: (place: google.maps.places.PlaceResult) => void
}

export function LocationSearchInput({ onLocationSelect }: LocationSearchInputProps) {
  const inputRef = useRef<HTMLInputElement>(null)

  useEffect(() => {
    const initAutocomplete = async () => {
      const loader = new Loader({
        apiKey: process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY!,
        version: 'weekly',
        libraries: ['places'],
      })

      const { Autocomplete } = await loader.importLibrary('places')

      if (inputRef.current) {
        const autocomplete = new Autocomplete(inputRef.current, {
          componentRestrictions: { country: 'kr' }, // 한국으로 제한
          types: ['geocode'], // 주소만
        })

        autocomplete.addListener('place_changed', () => {
          const place = autocomplete.getPlace()
          onLocationSelect(place)
        })
      }
    }

    initAutocomplete()
  }, [onLocationSelect])

  return (
    <input
      ref={inputRef}
      type="text"
      placeholder="지역을 검색하세요 (예: 강남구 역삼동)"
      className="w-full px-4 py-2 border rounded-lg"
    />
  )
}
```

### 5. 판매자의 위치 선택 (상품 등록)

```tsx
// app/sell/page.tsx
'use client'

import { LocationSearchInput } from '@/components/LocationSearchInput'
import { GoogleMap } from '@/components/GoogleMap'
import { useState } from 'react'

export default function SellPage() {
  const [selectedLocation, setSelectedLocation] = useState<{
    lat: number
    lng: number
    address: string
  } | null>(null)

  const handleLocationSelect = (place: google.maps.places.PlaceResult) => {
    if (place.geometry?.location) {
      setSelectedLocation({
        lat: place.geometry.location.lat(),
        lng: place.geometry.location.lng(),
        address: place.formatted_address || '',
      })
    }
  }

  return (
    <div>
      <h1>상품 등록</h1>
      
      {/* 위치 검색 */}
      <div className="mb-4">
        <label className="block mb-2 font-medium">거래 위치</label>
        <LocationSearchInput onLocationSelect={handleLocationSelect} />
      </div>
      
      {/* 선택된 위치 지도 */}
      {selectedLocation && (
        <div className="h-64 mb-4">
          <GoogleMap
            center={{ lat: selectedLocation.lat, lng: selectedLocation.lng }}
            zoom={15}
            markers={[{ lat: selectedLocation.lat, lng: selectedLocation.lng }]}
          />
        </div>
      )}
      
      {/* 나머지 폼 */}
    </div>
  )
}
```

## 스타일링

### Tailwind CSS와 통합
```tsx
<div className="w-full h-96 rounded-xl overflow-hidden shadow-lg">
  <GoogleMap center={center} />
</div>
```

### 커스텀 스타일 적용
```tsx
const mapOptions: google.maps.MapOptions = {
  styles: [
    {
      featureType: 'poi',
      elementType: 'labels',
      stylers: [{ visibility: 'off' }] // POI 라벨 숨기기
    }
  ],
  disableDefaultUI: false,
  zoomControl: true,
  mapTypeControl: false,
  streetViewControl: false,
  fullscreenControl: false,
}
```

## 보안 및 최적화

### API 키 제한
1. Google Cloud Console에서 API 키 제한 설정
2. HTTP 리퍼러 제한 추가:
   - `localhost:3000/*` (개발)
   - `your-domain.com/*` (프로덕션)
3. API 키 권한을 필요한 API만으로 제한

### 비용 최적화
1. **지도 로딩 지연**: 사용자가 스크롤하여 지도가 보일 때만 로딩
2. **캐싱**: 자주 사용되는 Geocoding 결과 캐싱
3. **요청 최소화**: 불필요한 API 호출 방지

```tsx
'use client'

import { useEffect, useRef, useState } from 'react'
import { useInView } from 'react-intersection-observer'

export function LazyGoogleMap(props: GoogleMapProps) {
  const { ref, inView } = useInView({ triggerOnce: true })
  const [shouldLoad, setShouldLoad] = useState(false)

  useEffect(() => {
    if (inView) {
      setShouldLoad(true)
    }
  }, [inView])

  return (
    <div ref={ref} className="w-full h-full">
      {shouldLoad ? <GoogleMap {...props} /> : <div>지도 로딩 중...</div>}
    </div>
  )
}
```

## 타입 정의

```tsx
// types/google-maps.ts
export interface Location {
  lat: number
  lng: number
}

export interface Marker extends Location {
  label?: string
  title?: string
}

export interface DeliveryLocation {
  departure: Location
  destination: Location
  departureName: string
  destinationName: string
}
```

## 참고 문서
- [Google Maps JavaScript API](https://developers.google.com/maps/documentation/javascript)
- [Geocoding API](https://developers.google.com/maps/documentation/geocoding)
- [Places API](https://developers.google.com/maps/documentation/places/web-service)